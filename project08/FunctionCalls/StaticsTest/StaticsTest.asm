//initalizing
@256
D=A
@SP
M=D
//writing call
@returnSys.init0
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@ARG
M=D
@0
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(returnSys.init0)
//writing function
(Class1.set)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//location in memory
@ARG
D=M
//pushing from ram
@0
A=D+A
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//pop static
@Class1.vm.0
M=D
//location in memory
@ARG
D=M
//pushing from ram
@1
A=D+A
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//pop static
@Class1.vm.1
M=D
@0
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
//write return
@LCL
D=M
@R13
M=D
@R14
M=D
@5
D=A
@R14
M=M-D
A=M
D=M
@R14
M=D
//popping
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//writing function
(Class1.get)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push static
@Class1.vm.0
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//push static
@Class1.vm.1
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//writting subtraction
@SP
A=M-1
M=M-D
//write return
@LCL
D=M
@R13
M=D
@R14
M=D
@5
D=A
@R14
M=M-D
A=M
D=M
@R14
M=D
//popping
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//writing function
(Class2.set)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//location in memory
@ARG
D=M
//pushing from ram
@0
A=D+A
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//pop static
@Class2.vm.0
M=D
//location in memory
@ARG
D=M
//pushing from ram
@1
A=D+A
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//pop static
@Class2.vm.1
M=D
@0
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
//write return
@LCL
D=M
@R13
M=D
@R14
M=D
@5
D=A
@R14
M=M-D
A=M
D=M
@R14
M=D
//popping
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//writing function
(Class2.get)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
//push static
@Class2.vm.0
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//push static
@Class2.vm.1
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
//popping
@SP
M=M-1
A=M
D=M
//writting subtraction
@SP
A=M-1
M=M-D
//write return
@LCL
D=M
@R13
M=D
@R14
M=D
@5
D=A
@R14
M=M-D
A=M
D=M
@R14
M=D
//popping
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
A=M
0;JMP
//writing function
(Sys.init)
@6
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
//writing call
@returnSys.init0
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@ARG
M=D
@12
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(returnSys.init0)
//place in memory
@5
D=A
//store in RAM
@13
M=D
@0
D=A
@13
M=M+D
@SP
M=M-1
A=M
D=M
@13
A=M
M=D
@23
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@15
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
//writing call
@returnSys.init1
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@ARG
M=D
@22
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(returnSys.init1)
//place in memory
@5
D=A
//store in RAM
@13
M=D
@0
D=A
@13
M=M+D
@SP
M=M-1
A=M
D=M
@13
A=M
M=D
//writing call
@returnSys.init2
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@ARG
M=D
@10
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(returnSys.init2)
//writing call
@returnSys.init3
D=A
//pushing
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
//pushing
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@ARG
M=D
@20
D=A
@ARG
M=M-D
@5
D=A
@ARG
M=M-D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(returnSys.init3)
//writing label
($WHILE)
//writing goto
@$WHILE
0;JMP
