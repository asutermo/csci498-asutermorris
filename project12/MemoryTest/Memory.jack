// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

	static int len;
	static int nex;
	static Array free;
	
    /** Initializes memory parameters. */
    function void init() {
		var Array next;
		let len = 0;
		let nex = 1;
		let free = 2048;
		let free[len] = 2;
		let free[nex] = 2050;
		let next = free[nex];
		let next[len] = 16382;
		let next[nex] = null;
		return;
    }

    /** Returns the value of the main memory at this address. */
    function int peek(int address) {
		var Array mem;
		let mem = 0;
		return mem[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
		var Array mem;
		let mem = 0;
		let mem[address] = value;
		return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
		var Array previous;
		var Array next;
		var Array curr;
		let curr = free;
		
		while (~(curr[len] > size)) {
			if (~(curr[nex] = null))
			{
				let previous = curr;
				let curr = curr[nex];
			}
		}
		
		if (~(curr[len] = (size+1))) {
			let next = curr + size + 1;
			let next[len] = curr[len] - (size+1);
			let next[nex] = curr[nex];
			let previous[nex] = next;
		}
		
		let curr[len] = size + 1;
		return (curr + 1);
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
		var Array deallocate;
		var Array node_element;
		
		let deallocate = (object - 1);
		let deallocate[nex] = null;
		let node_element = free;
		
		while (~(node_element[nex] = null)) {
			let node_element = node_element[nex];
		}
		
		let node_element[nex] = deallocate;
		return;
		
    }    
}
